// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":32605,"type":"Slider","state":{"id":"Slider1","x":2,"y":5,"w":8,"h":2,"css":{},"color":"#008000","fontSize":20,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":14029,"type":"Slider","state":{"id":"Slider2","x":2,"y":8,"w":8,"h":2,"css":{},"color":"#008000","fontSize":20,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":15600,"type":"Slider","state":{"id":"Slider3","x":2,"y":11,"w":8,"h":2,"css":{},"color":"#008000","fontSize":20,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":45189,"type":"Slider","state":{"id":"Slider4","x":2,"y":14,"w":8,"h":2,"css":{},"color":"#008000","fontSize":20,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":57555,"type":"Button","state":{"id":"ButtonStart","x":3,"y":1,"w":6,"h":1,"css":{},"text":"Start","fontSize":14,"color":"#000000","background":"#00ff1e","align":"center","valign":"center"}},{"uuid":17912,"type":"Button","state":{"id":"ButtonStop","x":3,"y":3,"w":6,"h":1,"css":{},"text":"Stop","fontSize":14,"color":"#000000","background":"#ff0000","align":"center","valign":"center"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        MotorSpeed0(
            UI.slider(2, 5, 8, 2, 32605)
                .fontSize(20)
                .min(-2)
                .max(2)
                .precision(0.5)
        ),
        MotorSpeed1(
            UI.slider(2, 8, 8, 2, 14029)
                .fontSize(20)
                .min(-2)
                .max(2)
                .precision(0.5)
        ),
        MotorSpeed2(
            UI.slider(2, 11, 8, 2, 15600)
                .fontSize(20)
                .min(-2)
                .max(2)
                .precision(0.5)
        ),
        MotorSpeed3(
            UI.slider(2, 14, 8, 2, 45189)
                .fontSize(20)
                .min(-2)
                .max(2)
                .precision(0.5)
        ),
        ButtonStart(
            UI.button(3, 1, 6, 1, 57555)
                .text("Start")
                .fontSize(14)
                .background("#00ff1e")
        ),
        ButtonStop(
            UI.button(3, 3, 6, 1, 17912)
                .text("Stop")
                .fontSize(14)
                .background("#ff0000")
        )
    {

    }

public:
    void commit();

    Slider& MotorSpeed0;
    Slider& MotorSpeed1;
    Slider& MotorSpeed2;
    Slider& MotorSpeed3;
    Button& ButtonStart;
    Button& ButtonStop;
  //  Button& ButtonStop;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Slider MotorSpeed0;
    Slider MotorSpeed1;
    Slider MotorSpeed2;
    Slider MotorSpeed3;
    Button ButtonStart;
    Button ButtonStop;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.MotorSpeed0 = MotorSpeed0.finish();
    Layout.MotorSpeed1 = MotorSpeed1.finish();
    Layout.MotorSpeed2 = MotorSpeed2.finish();
    Layout.MotorSpeed3 = MotorSpeed3.finish();
    Layout.ButtonStart = ButtonStart.finish();
    Layout.ButtonStop = ButtonStop.finish();
    UI.commit();
}

};

};